[coverage:report]
precision = 2
exclude_lines =
    pragma: no cover
    raise NotImplementedError
    raise NotImplemented

[coverage:run]
source = app
branch = True

[mypy]
plugins = pydantic.mypy

strict_optional = True
warn_redundant_casts = True
warn_unused_ignores = True
disallow_any_generics = True
check_untyped_defs = True

disallow_untyped_defs = True
mypy_path = .

[flake8]
format = wemake
max-line-length = 120
max-line-complexity = 22
max-module-members = 22
max-cognitive-score = 14
max-cognitive-average = 15
max-imports = 20
max-import-from-members = 15
max-string-usages = 7
# Maximum number of locals for function / method body
max-local-variables = 25
# Maximum number of arguments for function / method
max-arguments = 10
max-methods=15

ignore =
    # common errors:
    # Allow to write dict as literal
    C408
    # Do not force trailling comma
    C812, C816, C815
    # Allow `f` string
    WPS305
    # Docstring is not mandatory
    D100, D101, D102, D103, D104
    # FastAPI architecture requires a lot of functions calls as default arguments, so ignore it here.
    B008,
    # docs are missing in this project.
    D, RST,
    # Remove first argument checking in class method. Because Pydantic validators are implicite class methods.
    N805,
    # Allow underscore number pattern
    WPS114, WPS115
    # Allow complex f strings
    WPS237, 
    # WPS: 3xx
    # IMO, but the obligation to specify the base class is redundant.
    WPS306,
    # We agree to allow walrus operator (:=) usage.
    WPS332,
    # WPS: 4xx
    # FastAPI architecture requires a lot of complex calls as default arguments, so ignore it here.
    WPS404,
    # again, FastAPI DI architecture involves a lot of nested functions as DI providers.
    WPS430,
    
    WPS529
    # WPS: 6xx
    # pydantic defines models in dataclasses model style, but not supported by WPS.
    WPS601, WPS600
    # async magic method usage: __call__
    WPS610,
    S101
    T100, T101
no-accept-encodings = True
nested-classes-whitelist=Config
inline-quotes = double
